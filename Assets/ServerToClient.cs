// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: serverToClient.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from serverToClient.proto</summary>
public static partial class ServerToClientReflection {

  #region Descriptor
  /// <summary>File descriptor for serverToClient.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ServerToClientReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRzZXJ2ZXJUb0NsaWVudC5wcm90byKeAQoHQW5vdGhlchIMCgRuYW1lGAog",
          "ASgJEg0KBXBvc194GAEgASgCEg0KBXBvc195GAIgASgCEg0KBXBvc196GAMg",
          "ASgCEg0KBXJvdF94GAQgASgCEg0KBXJvdF95GAUgASgCEg0KBXJvdF96GAYg",
          "ASgCEgoKAmhwGAcgASgFEg8KB2Jvc3NfaHAYCCABKAUSDgoGdGFyZ2V0GAkg",
          "ASgFYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Another), global::Another.Parser, new[]{ "Name", "PosX", "PosY", "PosZ", "RotX", "RotY", "RotZ", "Hp", "BossHp", "Target" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Another : pb::IMessage<Another> {
  private static readonly pb::MessageParser<Another> _parser = new pb::MessageParser<Another>(() => new Another());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Another> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ServerToClientReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Another() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Another(Another other) : this() {
    name_ = other.name_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    posZ_ = other.posZ_;
    rotX_ = other.rotX_;
    rotY_ = other.rotY_;
    rotZ_ = other.rotZ_;
    hp_ = other.hp_;
    bossHp_ = other.bossHp_;
    target_ = other.target_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Another Clone() {
    return new Another(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 10;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pos_x" field.</summary>
  public const int PosXFieldNumber = 1;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "pos_y" field.</summary>
  public const int PosYFieldNumber = 2;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "pos_z" field.</summary>
  public const int PosZFieldNumber = 3;
  private float posZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosZ {
    get { return posZ_; }
    set {
      posZ_ = value;
    }
  }

  /// <summary>Field number for the "rot_x" field.</summary>
  public const int RotXFieldNumber = 4;
  private float rotX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RotX {
    get { return rotX_; }
    set {
      rotX_ = value;
    }
  }

  /// <summary>Field number for the "rot_y" field.</summary>
  public const int RotYFieldNumber = 5;
  private float rotY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RotY {
    get { return rotY_; }
    set {
      rotY_ = value;
    }
  }

  /// <summary>Field number for the "rot_z" field.</summary>
  public const int RotZFieldNumber = 6;
  private float rotZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RotZ {
    get { return rotZ_; }
    set {
      rotZ_ = value;
    }
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 7;
  private int hp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "boss_hp" field.</summary>
  public const int BossHpFieldNumber = 8;
  private int bossHp_;
  /// <summary>
  ///boss的生命值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BossHp {
    get { return bossHp_; }
    set {
      bossHp_ = value;
    }
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 9;
  private int target_;
  /// <summary>
  ///boss攻击目标
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Target {
    get { return target_; }
    set {
      target_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Another);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Another other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (PosX != other.PosX) return false;
    if (PosY != other.PosY) return false;
    if (PosZ != other.PosZ) return false;
    if (RotX != other.RotX) return false;
    if (RotY != other.RotY) return false;
    if (RotZ != other.RotZ) return false;
    if (Hp != other.Hp) return false;
    if (BossHp != other.BossHp) return false;
    if (Target != other.Target) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (PosX != 0F) hash ^= PosX.GetHashCode();
    if (PosY != 0F) hash ^= PosY.GetHashCode();
    if (PosZ != 0F) hash ^= PosZ.GetHashCode();
    if (RotX != 0F) hash ^= RotX.GetHashCode();
    if (RotY != 0F) hash ^= RotY.GetHashCode();
    if (RotZ != 0F) hash ^= RotZ.GetHashCode();
    if (Hp != 0) hash ^= Hp.GetHashCode();
    if (BossHp != 0) hash ^= BossHp.GetHashCode();
    if (Target != 0) hash ^= Target.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PosX != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(PosY);
    }
    if (PosZ != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(PosZ);
    }
    if (RotX != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(RotX);
    }
    if (RotY != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(RotY);
    }
    if (RotZ != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(RotZ);
    }
    if (Hp != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Hp);
    }
    if (BossHp != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(BossHp);
    }
    if (Target != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Target);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Name);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (PosZ != 0F) {
      size += 1 + 4;
    }
    if (RotX != 0F) {
      size += 1 + 4;
    }
    if (RotY != 0F) {
      size += 1 + 4;
    }
    if (RotZ != 0F) {
      size += 1 + 4;
    }
    if (Hp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
    }
    if (BossHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BossHp);
    }
    if (Target != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Another other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.PosZ != 0F) {
      PosZ = other.PosZ;
    }
    if (other.RotX != 0F) {
      RotX = other.RotX;
    }
    if (other.RotY != 0F) {
      RotY = other.RotY;
    }
    if (other.RotZ != 0F) {
      RotZ = other.RotZ;
    }
    if (other.Hp != 0) {
      Hp = other.Hp;
    }
    if (other.BossHp != 0) {
      BossHp = other.BossHp;
    }
    if (other.Target != 0) {
      Target = other.Target;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          PosX = input.ReadFloat();
          break;
        }
        case 21: {
          PosY = input.ReadFloat();
          break;
        }
        case 29: {
          PosZ = input.ReadFloat();
          break;
        }
        case 37: {
          RotX = input.ReadFloat();
          break;
        }
        case 45: {
          RotY = input.ReadFloat();
          break;
        }
        case 53: {
          RotZ = input.ReadFloat();
          break;
        }
        case 56: {
          Hp = input.ReadInt32();
          break;
        }
        case 64: {
          BossHp = input.ReadInt32();
          break;
        }
        case 72: {
          Target = input.ReadInt32();
          break;
        }
        case 82: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
